# Authors: Frank Douglas & Marcelo Dias
# Last modified: 11/09/2020

require "byebug"

class SyntacticAnalyzer
	attr_accessor :current_state, :previous_state, :current_index, :syntactic_table, :errors

		@current_state
		@previous_state
		@current_index
		@syntactic_table
		@errors

		INITIAL_STATE = 's0'

		# FUNÇÕES PÚBLICAS ----------------------------
		# CONSTRUTOR ----------------------------------
		def initialize token_array
			@current_state   = INITIAL_STATE
			@previous_state  = 'nil'
			@token_array     = token_array << '$'
			@current_index   = 0
			@ip              = nil
			@grammar         = initialize_grammar()
			@syntactic_table = initialize_syntactic_table()
			@errors          = []
		end

		# ---------------------------------------------

		def analyse
			stack = ['s0']

			ip = @token_array[@current_index]

			loop
				a  = ip["token"]
				s  = stack.last
				sl = action(s, a)

				if(sl.match(/s\d+/))
					stack.push(a)
					stack.push(sl)

					@current_index += 1

					ip = @token_array[@current_index]
				elsif(sl.match(/r\d+/)
					goto_number = sl.match(/\d+/)[0]

					alpha = @grammar[goto_number]['left']
					beta  = @grammar[goto_number]['right']

					beta_length = count_symbols(beta)

					for i in 1..beta_length
						@token_array.pop
					end

					sl = @token_array.last

					@token_array.push(alpha)

					$token_array.push(goto(sl, alpha))

					puts alpha . ' => ' . beta
				elsif action(s, a) == 'acc'
					return;
				else	
					error()
				end
			end
		end

		def initialize_grammar
			return {
				'1' => {
					'left'  => 'S',
					'right' => 'P'
				},
				'2' => {
					'left'  => 'P',
					'right' => 'inicio V A'
				},
				'3' => {
					'left'  => 'V',
					'right' => 'varinicio LV'
				},
				'4' => {
					'left'  => 'LV',
					'right' => 'D LV'
				},
				'5' => {
					'left'  => 'LV',
					'right' => 'varfim'
				},
				'6' => {
					'left'  => 'D',
					'right' => 'id TIPO'
				},
				'7' => {
					'left'  => 'TIPO',
					'right' => 'int'
				},
				'8' => {
					'left'  => 'TIPO',
					'right' => 'real'
				},
				'9' => {
					'left'  => 'TIPO',
					'right' => 'lit'
				},
				'10' => {
					'left'  => 'A',
					'right' => 'ES A'
				},
				'11' => {
					'left'  => 'ES',
					'right' => 'leia id;'
				},
				'12' => {
					'left'  => 'ES',
					'right' => 'escreva ARG;'
				},
				'13' => {
					'left'  => 'ARG',
					'right' => 'literal'
				},
				'14' => {
					'left'  => 'ARG',
					'right' => 'num'
				},
				'15' => {
					'left'  => 'ARG',
					'right' => 'id'
				},
				'16' => {
					'left'  => 'A',
					'right' => 'CMD A'
				},
				'17' => {
					'left'  => 'CMD',
					'right' => 'id rcb LD;'
				},
				'18' => {
					'left'  => 'LD',
					'right' => 'OPRD opm OPRD'
				},
				'19' => {
					'left'  => 'LD',
					'right' => 'OPRD'
				},
				'20' => {
					'left'  => 'OPRD',
					'right' => 'id'
				},
				'21' => {
					'left'  => 'OPRD',
					'right' => 'num'
				},
				'22' => {
					'left'  => 'A',
					'right' => 'COND A'
				},
				'23' => {
					'left'  => 'COND',
					'right' => 'CABEÇALHO CORPO'
				},
				'24' => {
					'left'  => 'CABEÇALHO',
					'right' => 'se (EXP_R) entao'
				},
				'25' => {
					'left'  => 'EXP_R',
					'right' => 'OPRD opr OPRD'
				},
				'26' => {
					'left'  => 'CORPO',
					'right' => 'ES CORPO'
				},
				'27' => {
					'left'  => 'CORPO',
					'right' => 'CMD CORPO'
				},
				'28' => {
					'left'  => 'CORPO',
					'right' => 'COND CORPO'
				},
				'29' => {
					'left'  => 'CORPO',
					'right' => 'fimse'
				},
				'30' => {
					'left'  => 'A',
					'right' => 'fim'
				}
			}
		end

		def initialize_syntactic_table
			return {
				's0' => {
					'P' => '2',
					'inicio' => 's3'
				},
				's2' => {
					'$' => 'acc'
				},
				's3' => {
					'V' => '2',
					'varinicio' => 's5',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				},
				's' => {
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => '',
					'' => ''
				}
			}
		end

		# FUNÇÕES DE AUXÍLIO --------------------------
		def action s, a
			return @syntactic_table[s][a]
		end

		def goto s, a
			return @syntactic_table[s][a]
		end

		def count_symbols string
			return string.strip.split(' ').count
		end

		# FUNÇÕES DE ERRO -----------------------------
		def error
			puts 'ERRO!'
		end

		# ---------------------------------------------
		# ---------------------------------------------
end